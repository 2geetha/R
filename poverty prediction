#Model 7: down sampled RF
ctrl <- trainControl(method = "cv",classProbs = TRUE,summaryFunction = twoClassSummary)
table(train$poor)
nmin <- sum(train$poor == "True")
set.seed(123)
rfDownsampled <- train(poor ~ ., data = train[,-3],
                       method = "rf",
                       ntree = 100,
                       tuneLength = 5,
                       metric = "ROC",
                       trControl = ctrl,
                       strata = train$poor,                       
                       sampsize = rep(nmin, 2))

poor.A.downRF.pred <- predict(rfDownsampled, test, type = "prob")
downsampledROC <- roc(response = test$poor, 
                      predictor = poor.A.downRF.pred,
                      levels = rev(levels(test$poor)))
plot(downsampledROC, col = rgb(1, 0, 0, .5), lwd = 2)

#Model 6: extreme gradient boosting (xgboost)
train_B_clean$poor = ifelse(train_B_clean$poor== "True", 1,0)

#split data
set.seed(123)
sampletrain_B = sample(nrow(train_B_clean), round(0.70*nrow(train_B_clean)), replace = F)
train= train_B_clean[sampletrain_B,]
test = train_B_clean[-sampletrain_B,]

labels <- train$poor 
ts_label <- test$poor
new_tr <- model.matrix(~.+0,data = train[,-c(1:3)]) 
new_ts <- model.matrix(~.+0,data = test[,-c(1:3)])

dtrain <- xgb.DMatrix(data = new_tr,label = labels) 
dtest <- xgb.DMatrix(data = new_ts,label=ts_label)
params <- list(booster = "gbtree", objective = "binary:logistic", eta=0.1, gamma=0, max_depth=6, min_child_weight=1, max_delta_step=3, subsample=0.5, colsample_bytree=0.5)
xgbcv.B <- xgb.cv( params = params, data = dtrain, nrounds = 400, nfold = 5, showsd = T, stratified = T, print_every_n = 10, early_stop_round = 20, maximize = F)
xgbcv.B$best_iteration #215
#min(xgbcv.A$test.error.mean)
xgb2 <- xgb.train (params = params, data = dtrain, nrounds = 400, watchlist = list(val=dtest,train=dtrain), print_every_n = 10, early_stop_round = 20, maximize = F , eval_metric = "error")
xgb.B.pred <- predict (xgb2,dtest)
xgb.B.pred <- ifelse (xgb.B.pred > 0.5,1,0)
confusionMatrix (xgb.B.pred, ts_label)
xgb2$best_score
plot.roc(ts_label, xgb.B.pred, print.auc=T, print.auc.y=0.5) 

#predict on test data
test_B_clean$poor = ifelse(test_B_clean$poor== "True", 1,0)
test_label <- test_B_clean$poor
new_test <- model.matrix(~.+0,data = test_B_clean[,-c(1:3)])
dtestB <- xgb.DMatrix(data = new_test,label=test_label)
pred_B_xgb <- predict (xgb2,dtestB)
poor_B = pred_B_xgb
